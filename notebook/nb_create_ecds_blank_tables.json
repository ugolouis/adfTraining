{
	"name": "nb_create_ecds_blank_tables",
	"properties": {
		"folder": {
			"name": "create_source_blank_tables"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "70aef43c-e75b-435f-92ef-ec3cc0deefb2"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# import needed pyspark functions\r\n",
					"from pyspark.sql.functions import current_timestamp\r\n",
					"from pyspark.sql.types import StructType, StructField, IntegerType, StringType, TimestampType\r\n",
					"from delta.tables import DeltaTable"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_Accomodation_Type table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"IdOrder\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"AccomodationTypeDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"AccomodationDateAdded\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"AccomodationTypeSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Accomodation_Type\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Accomodation_Type created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS_AlcoholDrug table"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"EC_Injury_Alcohol_Drug\", StringType(), nullable=False),\r\n",
					"    StructField(\"AlcoholDrugDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_AlcoholDrug\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_AlcoholDrug created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")\r\n",
					"    # You might want to add additional error handling here, such as logging the error or retrying the operation"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_AttendanceOccurrence table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Prof_Reg_Issuer_Code\", StringType(), nullable=False),\r\n",
					"    StructField(\"Prof_Reg_Entry_Identifier\", StringType(), nullable=False),\r\n",
					"    StructField(\"Care_Prof_Tier\", StringType(), nullable=False),\r\n",
					"    StructField(\"Care_Prof_Dis_Resp_Ind\", StringType(), nullable=False),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_AttendanceOccurrence\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_AttendanceOccurrence created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_CodedClinicalFindings table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ObsId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"obsdetailsid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Coded_FindingSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_FindingDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_Finding_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_CodedClinicalFindings\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_CodedClinicalFindings created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"    \r\n",
					"    # Note: Primary Key is (visitarchiveid, ObsId, obsdetailsid)\r\n",
					"    # Delta Lake doesn't support primary key constraints directly, but we can ensure data integrity in our write operations\r\n",
					"    print(\"Note: Remember to enforce the primary key (visitarchiveid, ObsId, obsdetailsid) in your write operations.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS_CodedClinicalObservations table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ObsId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"obsdetailsid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Coded_ObservationSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_ObservationDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"Observation_Value\", StringType(), nullable=True),\r\n",
					"    StructField(\"UCUM_Unit_of_Measurement\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_Observation_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_CodedClinicalObservations\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_CodedClinicalObservations created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"    \r\n",
					"    # Note: Primary Key is (visitarchiveid, ObsId, obsdetailsid)\r\n",
					"    # Delta Lake doesn't support primary key constraints directly, but we can ensure data integrity in our write operations\r\n",
					"    print(\"Note: Remember to enforce the primary key (visitarchiveid, ObsId, obsdetailsid) in your write operations.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS_CodedScoredAssessment table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import current_timestamp\r\n",
					"from pyspark.sql.types import StructType, StructField, IntegerType, StringType, TimestampType\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ObsId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Coded_Assessment_Tool_TypeSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_Assessment_Tool_TypeDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"Person_Score\", StringType(), nullable=True),\r\n",
					"    StructField(\"Assessment_Tool_Validation_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_CodedScoredAssessment\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_CodedScoredAssessment created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")\r\n",
					"    # You might want to add additional error handling here, such as logging the error or retrying the operation"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### ECDS_Comorbidity table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ComorbidityIDOrder\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"Comorbidity\", StringType(), nullable=False),\r\n",
					"    StructField(\"ComorbidityDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Comorbidity\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Comorbidity created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS_Diagnosis table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"DiagnosiosisDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_Diagnosis_CodeSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"Coded_Clinical_Entry_Seq_Num\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"EC_Diagnosis_QualifierSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"DiagnosisQualifierDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_Diagnosis_LataralitySNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"DiagnosisLataralityDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"DiagnosisComment\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Diagnosis\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Diagnosis created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS_Diagnosis_xTab table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema_fields = [\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False)\r\n",
					"]\r\n",
					"\r\n",
					"# Dynamically create fields for diagnoses 1-10\r\n",
					"for i in range(1, 11):\r\n",
					"    schema_fields.extend([\r\n",
					"        StructField(f\"Diagnosiosis{i}Desc\", StringType(), nullable=True),\r\n",
					"        StructField(f\"EC_Diagnosis_Code{i}SNOMED\", StringType(), nullable=True),\r\n",
					"        StructField(f\"DiagnosisQualifier{i}Desc\", StringType(), nullable=True),\r\n",
					"        StructField(f\"EC_Diagnosis_Qualifier{i}SNOMED\", StringType(), nullable=True),\r\n",
					"        StructField(f\"DiagnosisLatarality{i}Desc\", StringType(), nullable=True),\r\n",
					"        StructField(f\"EC_Diagnosis_Latarality{i}SNOMED\", StringType(), nullable=True)\r\n",
					"    ])\r\n",
					"\r\n",
					"# Add InsertedOn field\r\n",
					"schema_fields.append(StructField(\"InsertedOn\", TimestampType(), nullable=True))\r\n",
					"\r\n",
					"# Create the schema\r\n",
					"schema = StructType(schema_fields)\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Diagnosis_xTab\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Diagnosis_xTab created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create ECDS/ECDS_EMED3_Fit_Note table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Assess_Date\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"Condition\", StringType(), nullable=True),\r\n",
					"    StructField(\"Diagnosis\", StringType(), nullable=True),\r\n",
					"    StructField(\"Start_Date\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"End_Date\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"Duration\", StringType(), nullable=True),\r\n",
					"    StructField(\"Recorded_Date\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"Follow_Up_Ind\", StringType(), nullable=True),\r\n",
					"    StructField(\"Note_Issuer\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_EMED3_Fit_Note\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_EMED3_Fit_Note created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### create CDS_ExpectedDateTimeOfTreatment table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Emergency_Care_Expected_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"Emergency_Care_Treatment_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_ExpectedDateTimeOfTreatment\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_ExpectedDateTimeOfTreatment created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_Investigations table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"InvestigationOrder\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"InvestigationDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_Investigation_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"EC_InvestigationCodeSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_InvestigationCodeCDS\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"AmendedOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Investigations\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Investigations created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_MentalHealthActLegalStatus table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"IdOrder\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"MHA_LSCP_Start_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"MHA_LSCP_Expiry_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"MHA_LegalStatusClassifactionCode\", StringType(), nullable=False),\r\n",
					"    StructField(\"MHA_LegalStatusClassifactionDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_MentalHealthActLegalStatus\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_MentalHealthActLegalStatus created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_Personal_Circumstances table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Soc_Per_SNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"Soc_Per_Description\", StringType(), nullable=True),\r\n",
					"    StructField(\"Soc_Per_Timestamp\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Personal_Circumstances\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Personal_Circumstances created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_Procedure table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ProcedureOrder\", LongType(), nullable=True),\r\n",
					"    StructField(\"ProcedureDesc\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_Procedure_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"EC_ProcedureCodeSNOMED\", StringType(), nullable=True),\r\n",
					"    StructField(\"EC_ProcedureCodeCDS\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_Procedure\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_Procedure created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_ReferralsToOtherServices table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"Referred_To_Service_Order\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"Referred_To_Service_Code\", StringType(), nullable=False),\r\n",
					"    StructField(\"Referred_To_Service_Desc\", StringType(), nullable=True),\r\n",
					"    StructField(\"Activity_Service_Request_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"Referred_To_Service_Assess_Date_Time\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_ReferralsToOtherServices\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_ReferralsToOtherServices created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_SafeguardingConcern table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"visitarchiveid\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"IdOrder\", IntegerType(), nullable=True),\r\n",
					"    StructField(\"Safeguarding_Concern\", StringType(), nullable=False),\r\n",
					"    StructField(\"Safeguarding_Concern_Desc\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False),\r\n",
					"    StructField(\"AmendOn\", TimestampType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_SafeguardingConcern\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_SafeguardingConcern created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_StoredProc_Log table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"LogID\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"StepDescription\", StringType(), nullable=True),\r\n",
					"    StructField(\"StepStart\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"StepFinish\", TimestampType(), nullable=True),\r\n",
					"    StructField(\"StepDurationSecs\", LongType(), nullable=True)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the computed column StepDurationSecs\r\n",
					"df = df.withColumn(\"StepDurationSecs\", \r\n",
					"                   expr(\"cast(unix_timestamp(StepFinish) - unix_timestamp(StepStart) as long)\"))\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_StoredProc_Log\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_StoredProc_Log created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"### Create ECDS_UpdateErrorText table"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Define the schema for the table\r\n",
					"schema = StructType([\r\n",
					"    StructField(\"RunId\", IntegerType(), nullable=False),\r\n",
					"    StructField(\"ErrorText\", StringType(), nullable=True),\r\n",
					"    StructField(\"InsertedOn\", TimestampType(), nullable=False)\r\n",
					"])\r\n",
					"\r\n",
					"# Create an empty DataFrame with the defined schema\r\n",
					"df = spark.createDataFrame([], schema)\r\n",
					"\r\n",
					"# Add the InsertedOn column with the current timestamp as default\r\n",
					"df = df.withColumn(\"InsertedOn\", current_timestamp())\r\n",
					"\r\n",
					"# Define the path for the Delta table\r\n",
					"delta_table_path = \"abfss://curated@louisstr.dfs.core.windows.net/ESHT/ECDS/ECDS_UpdateErrorText\"\r\n",
					"\r\n",
					"# Write the DataFrame as a Delta table with error handling\r\n",
					"try:\r\n",
					"    df.write.format(\"delta\").mode(\"overwrite\").option(\"overwriteSchema\", \"true\").save(delta_table_path)\r\n",
					"    print(\"Delta table ECDS_UpdateErrorText created successfully.\")\r\n",
					"    \r\n",
					"    # Verify the table was created\r\n",
					"    if DeltaTable.isDeltaTable(spark, delta_table_path):\r\n",
					"        print(\"Verified: The table is a valid Delta table.\")\r\n",
					"    else:\r\n",
					"        print(\"Warning: The table doesn't seem to be a valid Delta table.\")\r\n",
					"\r\n",
					"except Exception as e:\r\n",
					"    print(f\"Error creating Delta table: {str(e)}\")"
				],
				"execution_count": null
			}
		]
	}
}