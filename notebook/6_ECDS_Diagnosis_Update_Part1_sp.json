{
	"name": "6_ECDS_Diagnosis_Update_Part1_sp",
	"properties": {
		"folder": {
			"name": "ECDS_prod_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8479157f-b587-4f6b-bc32-308e402a87c9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ECDS_Diagnosis_Update_Part1_sp"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 1\r\n",
					"\r\n",
					"Delta Lake 0.8+"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"source_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis_vw'\r\n",
					"target_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis'\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"sensitive_codes_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/refECDS_SensitiveCodesSNOMED'\r\n",
					"\r\n",
					"# Read source view\r\n",
					"src_df = spark.read.format(\"delta\").load(source_delta_path)\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, target_delta_path)\r\n",
					"\r\n",
					"# Define merge condition\r\n",
					"merge_condition = \"\"\"\r\n",
					"    tgt.visitarchiveid = src.visitarchiveid AND\r\n",
					"    tgt.Coded_Clinical_Entry_Seq_Num = src.Coded_Clinical_Entry_Seq_Num\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Define update condition\r\n",
					"update_condition = \"\"\"\r\n",
					"    (COALESCE(src.EC_Diagnosis_CodeSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_CodeSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.Coded_Clinical_Entry_Seq_Num, 0) <> COALESCE(tgt.Coded_Clinical_Entry_Seq_Num, 0)) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_QualifierSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_QualifierSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_LataralitySNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_LataralitySNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.DiagnosisComment, 'X') <> COALESCE(tgt.DiagnosisComment, 'X'))\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    src_df.alias(\"src\"),\r\n",
					"    merge_condition\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set={\r\n",
					"        \"DiagnosiosisDesc\": \"src.DiagnosisDesc\",\r\n",
					"        \"EC_Diagnosis_CodeSNOMED\": \"src.EC_Diagnosis_CodeSNOMED\",\r\n",
					"        \"Coded_Clinical_Entry_Seq_Num\": \"src.Coded_Clinical_Entry_Seq_Num\",\r\n",
					"        \"DiagnosisQualifierDesc\": \"src.DiagnosisQualifierDesc\",\r\n",
					"        \"EC_Diagnosis_QualifierSNOMED\": \"src.EC_Diagnosis_QualifierSNOMED\",\r\n",
					"        \"DiagnosisLataralityDesc\": \"src.DiagnosisLataralityDesc\",\r\n",
					"        \"EC_Diagnosis_LataralitySNOMED\": \"src.EC_Diagnosis_LataralitySNOMED\",\r\n",
					"        \"DiagnosisComment\": \"src.DiagnosisComment\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values={\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"DiagnosiosisDesc\": \"src.DiagnosisDesc\",\r\n",
					"        \"EC_Diagnosis_CodeSNOMED\": \"src.EC_Diagnosis_CodeSNOMED\",\r\n",
					"        \"Coded_Clinical_Entry_Seq_Num\": \"src.Coded_Clinical_Entry_Seq_Num\",\r\n",
					"        \"DiagnosisQualifierDesc\": \"src.DiagnosisQualifierDesc\",\r\n",
					"        \"EC_Diagnosis_QualifierSNOMED\": \"src.EC_Diagnosis_QualifierSNOMED\",\r\n",
					"        \"DiagnosisLataralityDesc\": \"src.DiagnosisLataralityDesc\",\r\n",
					"        \"EC_Diagnosis_LataralitySNOMED\": \"src.EC_Diagnosis_LataralitySNOMED\",\r\n",
					"        \"DiagnosisComment\": \"src.DiagnosisComment\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedBySource()\r\n",
					" .delete()\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Perform the additional UPDATE operation\r\n",
					"main_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"diagnosis_df = target_table.toDF()\r\n",
					"sensitive_codes_df = spark.read.format(\"delta\").load(sensitive_codes_path)\r\n",
					"\r\n",
					"# Join the tables\r\n",
					"joined_df = (main_table.toDF().alias(\"m\")\r\n",
					"             .join(diagnosis_df.alias(\"d\"), col(\"m.visitarchiveid\") == col(\"d.visitarchiveid\"))\r\n",
					"             .join(sensitive_codes_df.alias(\"sc\"), col(\"d.EC_Diagnosis_CodeSNOMED\") == col(\"sc.snomed\"))\r\n",
					"             .where(col(\"m.Sensitive_Flag\") == \"N\")\r\n",
					"             .select(\"m.visitarchiveid\"))\r\n",
					"\r\n",
					"# Update the main table\r\n",
					"main_table.update(\r\n",
					"    condition=\"visitarchiveid IN (SELECT visitarchiveid FROM joined_df)\",\r\n",
					"    set={\"Sensitive_Flag\": lit(\"Y\")}\r\n",
					")\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = target_table.toDF().count()\r\n",
					"print(f\"Number of rows in the target table after merge: {affected_rows}\")\r\n",
					"\r\n",
					"updated_rows = main_table.toDF().where(col(\"Sensitive_Flag\") == \"Y\").count()\r\n",
					"print(f\"Number of rows updated in the main table: {updated_rows}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 2\r\n",
					"\r\n",
					"Earlier versions of Delta Lake"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"source_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis_vw'\r\n",
					"target_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis'\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"sensitive_codes_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/refECDS_SensitiveCodesSNOMED'\r\n",
					"\r\n",
					"# Read source view\r\n",
					"src_df = spark.read.format(\"delta\").load(source_delta_path)\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, target_delta_path)\r\n",
					"\r\n",
					"# Define merge condition\r\n",
					"merge_condition = \"\"\"\r\n",
					"    tgt.visitarchiveid = src.visitarchiveid AND\r\n",
					"    tgt.Coded_Clinical_Entry_Seq_Num = src.Coded_Clinical_Entry_Seq_Num\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Define update condition\r\n",
					"update_condition = \"\"\"\r\n",
					"    (COALESCE(src.EC_Diagnosis_CodeSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_CodeSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.Coded_Clinical_Entry_Seq_Num, 0) <> COALESCE(tgt.Coded_Clinical_Entry_Seq_Num, 0)) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_QualifierSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_QualifierSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_LataralitySNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_LataralitySNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.DiagnosisComment, 'X') <> COALESCE(tgt.DiagnosisComment, 'X'))\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    src_df.alias(\"src\"),\r\n",
					"    merge_condition\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set={\r\n",
					"        \"DiagnosiosisDesc\": \"src.DiagnosisDesc\",\r\n",
					"        \"EC_Diagnosis_CodeSNOMED\": \"src.EC_Diagnosis_CodeSNOMED\",\r\n",
					"        \"Coded_Clinical_Entry_Seq_Num\": \"src.Coded_Clinical_Entry_Seq_Num\",\r\n",
					"        \"DiagnosisQualifierDesc\": \"src.DiagnosisQualifierDesc\",\r\n",
					"        \"EC_Diagnosis_QualifierSNOMED\": \"src.EC_Diagnosis_QualifierSNOMED\",\r\n",
					"        \"DiagnosisLataralityDesc\": \"src.DiagnosisLataralityDesc\",\r\n",
					"        \"EC_Diagnosis_LataralitySNOMED\": \"src.EC_Diagnosis_LataralitySNOMED\",\r\n",
					"        \"DiagnosisComment\": \"src.DiagnosisComment\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values={\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"DiagnosiosisDesc\": \"src.DiagnosisDesc\",\r\n",
					"        \"EC_Diagnosis_CodeSNOMED\": \"src.EC_Diagnosis_CodeSNOMED\",\r\n",
					"        \"Coded_Clinical_Entry_Seq_Num\": \"src.Coded_Clinical_Entry_Seq_Num\",\r\n",
					"        \"DiagnosisQualifierDesc\": \"src.DiagnosisQualifierDesc\",\r\n",
					"        \"EC_Diagnosis_QualifierSNOMED\": \"src.EC_Diagnosis_QualifierSNOMED\",\r\n",
					"        \"DiagnosisLataralityDesc\": \"src.DiagnosisLataralityDesc\",\r\n",
					"        \"EC_Diagnosis_LataralitySNOMED\": \"src.EC_Diagnosis_LataralitySNOMED\",\r\n",
					"        \"DiagnosisComment\": \"src.DiagnosisComment\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Perform the delete operation for records not in source\r\n",
					"target_df = target_table.toDF()\r\n",
					"records_to_delete = target_df.join(src_df, ['visitarchiveid', 'Coded_Clinical_Entry_Seq_Num'], 'left_anti')\r\n",
					"\r\n",
					"if records_to_delete.count() > 0:\r\n",
					"    target_table.delete(\r\n",
					"        condition = \"\"\"\r\n",
					"        visitarchiveid IN (SELECT visitarchiveid FROM records_to_delete) AND\r\n",
					"        Coded_Clinical_Entry_Seq_Num IN (SELECT Coded_Clinical_Entry_Seq_Num FROM records_to_delete)\r\n",
					"        \"\"\"\r\n",
					"    )\r\n",
					"\r\n",
					"# Perform the additional UPDATE operation\r\n",
					"main_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"diagnosis_df = target_table.toDF()\r\n",
					"sensitive_codes_df = spark.read.format(\"delta\").load(sensitive_codes_path)\r\n",
					"\r\n",
					"# Join the tables\r\n",
					"joined_df = (main_table.toDF().alias(\"m\")\r\n",
					"             .join(diagnosis_df.alias(\"d\"), col(\"m.visitarchiveid\") == col(\"d.visitarchiveid\"))\r\n",
					"             .join(sensitive_codes_df.alias(\"sc\"), col(\"d.EC_Diagnosis_CodeSNOMED\") == col(\"sc.snomed\"))\r\n",
					"             .where(col(\"m.Sensitive_Flag\") == \"N\")\r\n",
					"             .select(\"m.visitarchiveid\"))\r\n",
					"\r\n",
					"# Update the main table\r\n",
					"main_table.update(\r\n",
					"    condition=\"visitarchiveid IN (SELECT visitarchiveid FROM joined_df)\",\r\n",
					"    set={\"Sensitive_Flag\": lit(\"Y\")}\r\n",
					")\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = target_table.toDF().count()\r\n",
					"print(f\"Number of rows in the target table after merge and delete: {affected_rows}\")\r\n",
					"\r\n",
					"updated_rows = main_table.toDF().where(col(\"Sensitive_Flag\") == \"Y\").count()\r\n",
					"print(f\"Number of rows updated in the main table: {updated_rows}\")"
				],
				"execution_count": null
			}
		]
	}
}