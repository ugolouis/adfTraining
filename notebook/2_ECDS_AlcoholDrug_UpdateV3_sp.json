{
	"name": "2_ECDS_AlcoholDrug_UpdateV3_sp",
	"properties": {
		"folder": {
			"name": "ECDS_prod_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "esht",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "0551a46f-e330-40a9-a962-e123fffd9fa6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f6e89fe8-0d17-497c-9795-5ecb2ab3bbcc/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/ugolouis-synapse-ws/bigDataPools/esht",
				"name": "esht",
				"type": "Spark",
				"endpoint": "https://ugolouis-synapse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/esht",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ECDS_AlcoholDrug_UpdateV3_sp"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Import necessary libraries\r\n",
					"from pyspark.sql.functions import col, substring, current_timestamp, coalesce, lit\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"source_path1 = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_AlcoholDrug_vw'\r\n",
					"source_path2 = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_AlcoholDrugV2_vw'\r\n",
					"target_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_AlcoholDrug'\r\n",
					"\r\n",
					"# Read source views\r\n",
					"df1 = spark.read.format(\"delta\").load(source_path1)\r\n",
					"df2 = spark.read.format(\"delta\").load(source_path2)\r\n",
					"\r\n",
					"# Create CTE equivalent\r\n",
					"cte_df = (\r\n",
					"    df1.select(\r\n",
					"        col(\"visitarchiveid\"),\r\n",
					"        substring(col(\"DrugAlcohol\"), 1, 50).alias(\"DrugAlcohol\"),\r\n",
					"        substring(col(\"DrugAlcoholSNOMED\"), 1, 18).alias(\"DrugAlcoholSNOMED\")\r\n",
					"    )\r\n",
					"    .union(\r\n",
					"        df2.select(\r\n",
					"            col(\"visitarchiveid\"),\r\n",
					"            substring(col(\"AlcoholDrugDesc\"), 1, 50).alias(\"DrugAlcohol\"),\r\n",
					"            substring(col(\"EC_Injury_Alcohol_Drug\"), 1, 18).alias(\"DrugAlcoholSNOMED\")\r\n",
					"        )\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, target_path)\r\n",
					"\r\n",
					"# Define merge and update conditions\r\n",
					"merge_condition = \"\"\"\r\n",
					"    tgt.visitarchiveid = src.visitarchiveid AND\r\n",
					"    tgt.EC_Injury_Alcohol_Drug = src.DrugAlcoholSNOMED\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"update_condition = \"\"\"\r\n",
					"    (COALESCE(src.DrugAlcoholSNOMED, 'X') <> COALESCE(tgt.EC_Injury_Alcohol_Drug, 'X')) OR\r\n",
					"    (COALESCE(src.DrugAlcohol, 'X') <> COALESCE(tgt.AlcoholDrugDesc, 'X'))\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    cte_df.alias(\"src\"),\r\n",
					"    merge_condition\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set={\r\n",
					"        \"EC_Injury_Alcohol_Drug\": \"src.DrugAlcoholSNOMED\",\r\n",
					"        \"AlcoholDrugDesc\": \"src.DrugAlcohol\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values={\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"EC_Injury_Alcohol_Drug\": \"src.DrugAlcoholSNOMED\",\r\n",
					"        \"AlcoholDrugDesc\": \"src.DrugAlcohol\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedBySource()\r\n",
					" .delete()\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = target_table.toDF().count()\r\n",
					"print(f\"Number of rows in the target table after merge: {affected_rows}\")"
				],
				"execution_count": 62
			}
		]
	}
}