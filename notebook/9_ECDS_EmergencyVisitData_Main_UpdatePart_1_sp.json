{
	"name": "9_ECDS_EmergencyVisitData_Main_UpdatePart_1_sp",
	"properties": {
		"folder": {
			"name": "ECDS_prod_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "3a6b3086-1d72-4173-b649-ac5132ef7b07"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 1\r\n",
					"\r\n",
					"Delta Lake 0.8+"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp, left, expr, datediff, year, to_date\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.types import IntegerType\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"patient_visit_history_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/SPB/PatientVisitHistoryData_Current'\r\n",
					"patient_data_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/SPB/PatientData_Current'\r\n",
					"accommodation_type_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Accomodation_Type'\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"ECDS_EmergencyVisitData_Main_Update\").getOrCreate()\r\n",
					"\r\n",
					"# Define custom function to strip characters\r\n",
					"def fn_StripCharacters(column, characters):\r\n",
					"    return expr(f\"regexp_replace({column}, '[^{characters}]', '')\")\r\n",
					"\r\n",
					"# Read source tables\r\n",
					"patient_visit_history_df = spark.read.format(\"delta\").load(patient_visit_history_path)\r\n",
					"patient_data_df = spark.read.format(\"delta\").load(patient_data_path)\r\n",
					"accommodation_type_df = spark.read.format(\"delta\").load(accommodation_type_path)\r\n",
					"\r\n",
					"# Create CTE equivalent\r\n",
					"src_df = (\r\n",
					"    patient_visit_history_df\r\n",
					"    .filter((col(\"eventType\") == \"A\") & (col(\"source\") == \"L\") & (col(\"eventTime\") >= \"2020-12-09\"))\r\n",
					"    .join(patient_data_df, \"patientid\", \"left\")\r\n",
					"    .join(accommodation_type_df, \"visitarchiveid\", \"left\")\r\n",
					"    .select(\r\n",
					"        col(\"pev.visitarchiveid\"),\r\n",
					"        col(\"pev.visitid\"),\r\n",
					"        fn_StripCharacters(col(\"pev.visitid\"), \"0-9\").cast(IntegerType()).alias(\"Er_Visit_Id\"),\r\n",
					"        left(coalesce(col(\"pev.HN\"), col(\"pc.altnumber\")), 10).alias(\"PATID_Extended\"),\r\n",
					"        lit(\"RXC00\").alias(\"Org_Code_PATID\"),\r\n",
					"        left(col(\"pc.natlnumber\"), 10).alias(\"NHS_Number\"),\r\n",
					"        col(\"pc.title\").cast(\"string\").alias(\"PersonTitle\"),\r\n",
					"        left(col(\"pc.firstName\"), 35).alias(\"PersonGivenName\"),\r\n",
					"        left(col(\"pc.lastName\"), 35).alias(\"PersonFamilyName\"),\r\n",
					"        left(col(\"pc.addressStreet\"), 35).alias(\"AddressLine1\"),\r\n",
					"        left(col(\"pc.addressArea\"), 35).alias(\"AddressLine2\"),\r\n",
					"        left(col(\"pc.addressCity\"), 35).alias(\"AddressLine3\"),\r\n",
					"        left(col(\"pc.addressCounty\"), 35).alias(\"AddressLine4\"),\r\n",
					"        lit(None).cast(\"string\").alias(\"AddressLine5\"),\r\n",
					"        left(col(\"pc.addressPostCode\"), 8).alias(\"Postcode\"),\r\n",
					"        when(col(\"pc.Gender\") == \"Male\", \"1\")\r\n",
					"        .when(col(\"pc.Gender\") == \"Female\", \"2\")\r\n",
					"        .otherwise(\"9\").alias(\"Gender\"),\r\n",
					"        col(\"pc.DOB\"),\r\n",
					"        left(col(\"act.AccomodationTypeSNOMED\"), 18).alias(\"Accomm_Status\"),\r\n",
					"        when(col(\"pev.ward\").like(\"HAS%\"), \"RXC01\").otherwise(\"RXC02\").alias(\"Site_Code_Of_Treatment\"),\r\n",
					"        col(\"pev.ward\").alias(\"NervecenterWard\"),\r\n",
					"        col(\"pev.eventTime\").alias(\"Arrival_Date_Time\"),\r\n",
					"        coalesce(\r\n",
					"            datediff(year(col(\"pev.eventTime\")), year(col(\"pc.DOB\"))) -\r\n",
					"            when(\r\n",
					"                (year(col(\"pev.eventTime\")) - year(col(\"pc.DOB\"))) * 365 + \r\n",
					"                datediff(to_date(col(\"pev.eventTime\")), to_date(col(\"pc.DOB\"))) % 365 < 0, \r\n",
					"                1\r\n",
					"            ).otherwise(0),\r\n",
					"            lit(999)\r\n",
					"        ).cast(\"string\").alias(\"Age_at_CDS_Activity_Date\"),\r\n",
					"        col(\"pev.EpisodeID\")\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    src_df.alias(\"src\"),\r\n",
					"    \"tgt.visitarchiveid = src.visitarchiveid\"\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition = \"\"\"\r\n",
					"        (COALESCE(src.visitid, 'X') <> COALESCE(tgt.visitid, 'X')) OR\r\n",
					"        (COALESCE(src.Er_Visit_ID, 0) <> COALESCE(tgt.Er_Visit_ID, 0)) OR\r\n",
					"        (COALESCE(src.Org_Code_PATID, 'X') <> COALESCE(tgt.Org_Code_PATID, 'X')) OR\r\n",
					"        (COALESCE(src.NHS_Number, 'X') <> COALESCE(tgt.NHS_Number, 'X')) OR\r\n",
					"        (COALESCE(src.PersonTitle, 'X') <> COALESCE(tgt.PersonTitle, 'X')) OR\r\n",
					"        (COALESCE(src.PersonGivenName, 'X') <> COALESCE(tgt.PersonGivenName, 'X')) OR\r\n",
					"        (COALESCE(src.PersonFamilyName, 'X') <> COALESCE(tgt.PersonFamilyName, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine1, 'X') <> COALESCE(tgt.AddressLine1, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine2, 'X') <> COALESCE(tgt.AddressLine2, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine3, 'X') <> COALESCE(tgt.AddressLine3, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine4, 'X') <> COALESCE(tgt.AddressLine4, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine5, 'X') <> COALESCE(tgt.AddressLine5, 'X')) OR\r\n",
					"        (COALESCE(src.Postcode, 'X') <> COALESCE(tgt.Postcode, 'X')) OR\r\n",
					"        (COALESCE(src.Gender, 'X') <> COALESCE(tgt.Gender, 'X')) OR\r\n",
					"        (COALESCE(src.DOB, to_date('1900-01-01')) <> COALESCE(tgt.DOB, to_date('1900-01-01'))) OR\r\n",
					"        (COALESCE(src.Accomm_Status, 'X') <> COALESCE(tgt.Accomm_Status, 'X')) OR\r\n",
					"        (COALESCE(src.Site_Code_Of_Treatment, 'X') <> COALESCE(tgt.Site_Code_Of_Treatment, 'X')) OR\r\n",
					"        (COALESCE(src.NervecenterWard, 'X') <> COALESCE(tgt.NervecenterWard, 'X')) OR\r\n",
					"        (COALESCE(src.Arrival_Date_Time, to_timestamp('1900-01-01')) <> COALESCE(tgt.Arrival_Date_Time, to_timestamp('1900-01-01'))) OR\r\n",
					"        (COALESCE(src.Age_at_CDS_Activity_Date, 'X') <> COALESCE(tgt.Age_at_CDS_Activity_Date, 'X')) OR\r\n",
					"        (COALESCE(src.EpisodeID, 'X') <> COALESCE(tgt.EpisodeID, 'X'))\r\n",
					"    \"\"\",\r\n",
					"    set = {\r\n",
					"        \"visitid\": \"src.visitid\",\r\n",
					"        \"Er_Visit_ID\": \"src.Er_Visit_ID\",\r\n",
					"        \"Org_Code_PATID\": \"src.Org_Code_PATID\",\r\n",
					"        \"NHS_Number\": \"src.NHS_Number\",\r\n",
					"        \"PersonTitle\": \"src.PersonTitle\",\r\n",
					"        \"PersonFamilyName\": \"src.PersonFamilyName\",\r\n",
					"        \"PersonGivenName\": \"src.PersonGivenName\",\r\n",
					"        \"AddressLine1\": \"src.AddressLine1\",\r\n",
					"        \"AddressLine2\": \"src.AddressLine2\",\r\n",
					"        \"AddressLine3\": \"src.AddressLine3\",\r\n",
					"        \"AddressLine4\": \"src.AddressLine4\",\r\n",
					"        \"AddressLine5\": \"src.AddressLine5\",\r\n",
					"        \"Postcode\": \"src.Postcode\",\r\n",
					"        \"Gender\": \"src.Gender\",\r\n",
					"        \"DOB\": \"src.DOB\",\r\n",
					"        \"Accomm_Status\": \"src.Accomm_Status\",\r\n",
					"        \"Site_Code_Of_Treatment\": \"src.Site_Code_Of_Treatment\",\r\n",
					"        \"NervecenterWard\": \"src.NervecenterWard\",\r\n",
					"        \"Arrival_Date_Time\": \"src.Arrival_Date_Time\",\r\n",
					"        \"Age_at_CDS_Activity_Date\": \"src.Age_at_CDS_Activity_Date\",\r\n",
					"        \"EpisodeID\": \"src.EpisodeID\",\r\n",
					"        \"AmendedOn\": \"current_timestamp()\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values = {\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"visitid\": \"src.visitid\",\r\n",
					"        \"Er_Visit_ID\": \"src.Er_Visit_ID\",\r\n",
					"        \"PATID_Extended\": \"src.PATID_Extended\",\r\n",
					"        \"Org_Code_PATID\": \"src.Org_Code_PATID\",\r\n",
					"        \"NHS_Number\": \"src.NHS_Number\",\r\n",
					"        \"PersonTitle\": \"src.PersonTitle\",\r\n",
					"        \"PersonFamilyName\": \"src.PersonFamilyName\",\r\n",
					"        \"PersonGivenName\": \"src.PersonGivenName\",\r\n",
					"        \"AddressLine1\": \"src.AddressLine1\",\r\n",
					"        \"AddressLine2\": \"src.AddressLine2\",\r\n",
					"        \"AddressLine3\": \"src.AddressLine3\",\r\n",
					"        \"AddressLine4\": \"src.AddressLine4\",\r\n",
					"        \"AddressLine5\": \"src.AddressLine5\",\r\n",
					"        \"Postcode\": \"src.Postcode\",\r\n",
					"        \"Gender\": \"src.Gender\",\r\n",
					"        \"DOB\": \"src.DOB\",\r\n",
					"        \"Accomm_Status\": \"src.Accomm_Status\",\r\n",
					"        \"Site_Code_Of_Treatment\": \"src.Site_Code_Of_Treatment\",\r\n",
					"        \"NervecenterWard\": \"src.NervecenterWard\",\r\n",
					"        \"Arrival_Date_Time\": \"src.Arrival_Date_Time\",\r\n",
					"        \"Age_at_CDS_Activity_Date\": \"src.Age_at_CDS_Activity_Date\",\r\n",
					"        \"EpisodeID\": \"src.EpisodeID\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Additional update for X numbers\r\n",
					"target_df = target_table.toDF()\r\n",
					"updated_df = (\r\n",
					"    target_df.join(patient_visit_history_df, \"visitarchiveid\")\r\n",
					"    .join(patient_data_df, \"patientid\", \"left\")\r\n",
					"    .filter(col(\"PATID_Extended\").isNull())\r\n",
					"    .withColumn(\"PATID_Extended\", left(coalesce(col(\"pev.HN\"), col(\"pc.altnumber\")), 10))\r\n",
					")\r\n",
					"\r\n",
					"target_table.alias(\"tgt\").merge(\r\n",
					"    updated_df.alias(\"upd\"),\r\n",
					"    \"tgt.visitarchiveid = upd.visitarchiveid\"\r\n",
					").whenMatchedUpdate(\r\n",
					"    set = {\"PATID_Extended\": \"upd.PATID_Extended\"}\r\n",
					").execute()\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = target_table.toDF().count()\r\n",
					"print(f\"Number of rows in the target table after update: {affected_rows}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 2\r\n",
					"\r\n",
					"Earlier versions of Delta Lake\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp, left, expr, datediff, year, to_date\r\n",
					"from delta.tables import DeltaTable\r\n",
					"from pyspark.sql.types import IntegerType\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"patient_visit_history_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/SPB/PatientVisitHistoryData_Current'\r\n",
					"patient_data_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/SPB/PatientData_Current'\r\n",
					"accommodation_type_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Accomodation_Type'\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"ECDS_EmergencyVisitData_Main_Update\").getOrCreate()\r\n",
					"\r\n",
					"# Define custom function to strip characters\r\n",
					"def fn_StripCharacters(column, characters):\r\n",
					"    return expr(f\"regexp_replace({column}, '[^{characters}]', '')\")\r\n",
					"\r\n",
					"# Read source tables\r\n",
					"patient_visit_history_df = spark.read.format(\"delta\").load(patient_visit_history_path)\r\n",
					"patient_data_df = spark.read.format(\"delta\").load(patient_data_path)\r\n",
					"accommodation_type_df = spark.read.format(\"delta\").load(accommodation_type_path)\r\n",
					"\r\n",
					"# Create CTE equivalent\r\n",
					"src_df = (\r\n",
					"    patient_visit_history_df\r\n",
					"    .filter((col(\"eventType\") == \"A\") & (col(\"source\") == \"L\") & (col(\"eventTime\") >= \"2020-12-09\"))\r\n",
					"    .join(patient_data_df, \"patientid\", \"left\")\r\n",
					"    .join(accommodation_type_df, \"visitarchiveid\", \"left\")\r\n",
					"    .select(\r\n",
					"        col(\"pev.visitarchiveid\"),\r\n",
					"        col(\"pev.visitid\"),\r\n",
					"        fn_StripCharacters(col(\"pev.visitid\"), \"0-9\").cast(IntegerType()).alias(\"Er_Visit_Id\"),\r\n",
					"        left(coalesce(col(\"pev.HN\"), col(\"pc.altnumber\")), 10).alias(\"PATID_Extended\"),\r\n",
					"        lit(\"RXC00\").alias(\"Org_Code_PATID\"),\r\n",
					"        left(col(\"pc.natlnumber\"), 10).alias(\"NHS_Number\"),\r\n",
					"        col(\"pc.title\").cast(\"string\").alias(\"PersonTitle\"),\r\n",
					"        left(col(\"pc.firstName\"), 35).alias(\"PersonGivenName\"),\r\n",
					"        left(col(\"pc.lastName\"), 35).alias(\"PersonFamilyName\"),\r\n",
					"        left(col(\"pc.addressStreet\"), 35).alias(\"AddressLine1\"),\r\n",
					"        left(col(\"pc.addressArea\"), 35).alias(\"AddressLine2\"),\r\n",
					"        left(col(\"pc.addressCity\"), 35).alias(\"AddressLine3\"),\r\n",
					"        left(col(\"pc.addressCounty\"), 35).alias(\"AddressLine4\"),\r\n",
					"        lit(None).cast(\"string\").alias(\"AddressLine5\"),\r\n",
					"        left(col(\"pc.addressPostCode\"), 8).alias(\"Postcode\"),\r\n",
					"        when(col(\"pc.Gender\") == \"Male\", \"1\")\r\n",
					"        .when(col(\"pc.Gender\") == \"Female\", \"2\")\r\n",
					"        .otherwise(\"9\").alias(\"Gender\"),\r\n",
					"        col(\"pc.DOB\"),\r\n",
					"        left(col(\"act.AccomodationTypeSNOMED\"), 18).alias(\"Accomm_Status\"),\r\n",
					"        when(col(\"pev.ward\").like(\"HAS%\"), \"RXC01\").otherwise(\"RXC02\").alias(\"Site_Code_Of_Treatment\"),\r\n",
					"        col(\"pev.ward\").alias(\"NervecenterWard\"),\r\n",
					"        col(\"pev.eventTime\").alias(\"Arrival_Date_Time\"),\r\n",
					"        coalesce(\r\n",
					"            datediff(year(col(\"pev.eventTime\")), year(col(\"pc.DOB\"))) -\r\n",
					"            when(\r\n",
					"                (year(col(\"pev.eventTime\")) - year(col(\"pc.DOB\"))) * 365 + \r\n",
					"                datediff(to_date(col(\"pev.eventTime\")), to_date(col(\"pc.DOB\"))) % 365 < 0, \r\n",
					"                1\r\n",
					"            ).otherwise(0),\r\n",
					"            lit(999)\r\n",
					"        ).cast(\"string\").alias(\"Age_at_CDS_Activity_Date\"),\r\n",
					"        col(\"pev.EpisodeID\")\r\n",
					"    )\r\n",
					")\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    src_df.alias(\"src\"),\r\n",
					"    \"tgt.visitarchiveid = src.visitarchiveid\"\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition = \"\"\"\r\n",
					"        (COALESCE(src.visitid, 'X') <> COALESCE(tgt.visitid, 'X')) OR\r\n",
					"        (COALESCE(src.Er_Visit_ID, 0) <> COALESCE(tgt.Er_Visit_ID, 0)) OR\r\n",
					"        (COALESCE(src.Org_Code_PATID, 'X') <> COALESCE(tgt.Org_Code_PATID, 'X')) OR\r\n",
					"        (COALESCE(src.NHS_Number, 'X') <> COALESCE(tgt.NHS_Number, 'X')) OR\r\n",
					"        (COALESCE(src.PersonTitle, 'X') <> COALESCE(tgt.PersonTitle, 'X')) OR\r\n",
					"        (COALESCE(src.PersonGivenName, 'X') <> COALESCE(tgt.PersonGivenName, 'X')) OR\r\n",
					"        (COALESCE(src.PersonFamilyName, 'X') <> COALESCE(tgt.PersonFamilyName, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine1, 'X') <> COALESCE(tgt.AddressLine1, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine2, 'X') <> COALESCE(tgt.AddressLine2, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine3, 'X') <> COALESCE(tgt.AddressLine3, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine4, 'X') <> COALESCE(tgt.AddressLine4, 'X')) OR\r\n",
					"        (COALESCE(src.AddressLine5, 'X') <> COALESCE(tgt.AddressLine5, 'X')) OR\r\n",
					"        (COALESCE(src.Postcode, 'X') <> COALESCE(tgt.Postcode, 'X')) OR\r\n",
					"        (COALESCE(src.Gender, 'X') <> COALESCE(tgt.Gender, 'X')) OR\r\n",
					"        (COALESCE(src.DOB, to_date('1900-01-01')) <> COALESCE(tgt.DOB, to_date('1900-01-01'))) OR\r\n",
					"        (COALESCE(src.Accomm_Status, 'X') <> COALESCE(tgt.Accomm_Status, 'X')) OR\r\n",
					"        (COALESCE(src.Site_Code_Of_Treatment, 'X') <> COALESCE(tgt.Site_Code_Of_Treatment, 'X')) OR\r\n",
					"        (COALESCE(src.NervecenterWard, 'X') <> COALESCE(tgt.NervecenterWard, 'X')) OR\r\n",
					"        (COALESCE(src.Arrival_Date_Time, to_timestamp('1900-01-01')) <> COALESCE(tgt.Arrival_Date_Time, to_timestamp('1900-01-01'))) OR\r\n",
					"        (COALESCE(src.Age_at_CDS_Activity_Date, 'X') <> COALESCE(tgt.Age_at_CDS_Activity_Date, 'X')) OR\r\n",
					"        (COALESCE(src.EpisodeID, 'X') <> COALESCE(tgt.EpisodeID, 'X'))\r\n",
					"    \"\"\",\r\n",
					"    set = {\r\n",
					"        \"visitid\": \"src.visitid\",\r\n",
					"        \"Er_Visit_ID\": \"src.Er_Visit_ID\",\r\n",
					"        \"Org_Code_PATID\": \"src.Org_Code_PATID\",\r\n",
					"        \"NHS_Number\": \"src.NHS_Number\",\r\n",
					"        \"PersonTitle\": \"src.PersonTitle\",\r\n",
					"        \"PersonFamilyName\": \"src.PersonFamilyName\",\r\n",
					"        \"PersonGivenName\": \"src.PersonGivenName\",\r\n",
					"        \"AddressLine1\": \"src.AddressLine1\",\r\n",
					"        \"AddressLine2\": \"src.AddressLine2\",\r\n",
					"        \"AddressLine3\": \"src.AddressLine3\",\r\n",
					"        \"AddressLine4\": \"src.AddressLine4\",\r\n",
					"        \"AddressLine5\": \"src.AddressLine5\",\r\n",
					"        \"Postcode\": \"src.Postcode\",\r\n",
					"        \"Gender\": \"src.Gender\",\r\n",
					"        \"DOB\": \"src.DOB\",\r\n",
					"        \"Accomm_Status\": \"src.Accomm_Status\",\r\n",
					"        \"Site_Code_Of_Treatment\": \"src.Site_Code_Of_Treatment\",\r\n",
					"        \"NervecenterWard\": \"src.NervecenterWard\",\r\n",
					"        \"Arrival_Date_Time\": \"src.Arrival_Date_Time\",\r\n",
					"        \"Age_at_CDS_Activity_Date\": \"src.Age_at_CDS_Activity_Date\",\r\n",
					"        \"EpisodeID\": \"src.EpisodeID\",\r\n",
					"        \"AmendedOn\": \"current_timestamp()\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values = {\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"visitid\": \"src.visitid\",\r\n",
					"        \"Er_Visit_ID\": \"src.Er_Visit_ID\",\r\n",
					"        \"PATID_Extended\": \"src.PATID_Extended\",\r\n",
					"        \"Org_Code_PATID\": \"src.Org_Code_PATID\",\r\n",
					"        \"NHS_Number\": \"src.NHS_Number\",\r\n",
					"        \"PersonTitle\": \"src.PersonTitle\",\r\n",
					"        \"PersonFamilyName\": \"src.PersonFamilyName\",\r\n",
					"        \"PersonGivenName\": \"src.PersonGivenName\",\r\n",
					"        \"AddressLine1\": \"src.AddressLine1\",\r\n",
					"        \"AddressLine2\": \"src.AddressLine2\",\r\n",
					"        \"AddressLine3\": \"src.AddressLine3\",\r\n",
					"        \"AddressLine4\": \"src.AddressLine4\",\r\n",
					"        \"AddressLine5\": \"src.AddressLine5\",\r\n",
					"        \"Postcode\": \"src.Postcode\",\r\n",
					"        \"Gender\": \"src.Gender\",\r\n",
					"        \"DOB\": \"src.DOB\",\r\n",
					"        \"Accomm_Status\": \"src.Accomm_Status\",\r\n",
					"        \"Site_Code_Of_Treatment\": \"src.Site_Code_Of_Treatment\",\r\n",
					"        \"NervecenterWard\": \"src.NervecenterWard\",\r\n",
					"        \"Arrival_Date_Time\": \"src.Arrival_Date_Time\",\r\n",
					"        \"Age_at_CDS_Activity_Date\": \"src.Age_at_CDS_Activity_Date\",\r\n",
					"        \"EpisodeID\": \"src.EpisodeID\"\r\n",
					"    }\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Handle deletions separately\r\n",
					"target_df = target_table.toDF()\r\n",
					"records_to_keep = target_df.join(src_df, \"visitarchiveid\", \"inner\").select(target_df[\"*\"])\r\n",
					"records_to_keep.write.format(\"delta\").mode(\"overwrite\").save(main_table_path)\r\n",
					"\r\n",
					"# Additional update for X numbers\r\n",
					"target_df = spark.read.format(\"delta\").load(main_table_path)\r\n",
					"updated_df = (\r\n",
					"    target_df.join(patient_visit_history_df, \"visitarchiveid\")\r\n",
					"    .join(patient_data_df, \"patientid\", \"left\")\r\n",
					"    .filter(col(\"PATID_Extended\").isNull())\r\n",
					"    .withColumn(\"PATID_Extended\", left(coalesce(col(\"pev.HN\"), col(\"pc.altnumber\")), 10))\r\n",
					")\r\n",
					"\r\n",
					"(DeltaTable.forPath(spark, main_table_path)\r\n",
					" .alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    updated_df.alias(\"upd\"),\r\n",
					"    \"tgt.visitarchiveid = upd.visitarchiveid\"\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    set = {\"PATID_Extended\": \"upd.PATID_Extended\"}\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = spark.read.format(\"delta\").load(main_table_path).count()\r\n",
					"print(f\"Number of rows in the target table after update: {affected_rows}\")"
				],
				"execution_count": null
			}
		]
	}
}