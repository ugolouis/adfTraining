{
	"name": "14_ECDS_Investigations_Update_Part2_sp",
	"properties": {
		"folder": {
			"name": "ECDS_prod_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "8f451698-dc6f-4b16-8f6f-77d9cac15223"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# ECDS_Investigations_Update_Part2_sp"
				]
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 1"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"target_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Investigations_xTab'\r\n",
					"source_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Investigations_xTab_vw'\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"ECDS_Investigations_Update_Part2\").getOrCreate()\r\n",
					"\r\n",
					"# Read target table and source view\r\n",
					"target_table = DeltaTable.forPath(spark, target_path)\r\n",
					"source_df = spark.read.format(\"delta\").load(source_path)\r\n",
					"\r\n",
					"# Define update condition (extend this for all 30 investigation codes)\r\n",
					"update_condition = \" OR \".join([\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}SNOMED, 'X') != COALESCE(tgt.EC_InvestigationCode{i}SNOMED, 'X')) OR \" +\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}CDS, 'X') != COALESCE(tgt.EC_InvestigationCode{i}CDS, 'X')) OR \" +\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}Date, to_date('1900-01-01')) != COALESCE(tgt.EC_InvestigationCode{i}Date, to_date('1900-01-01')))\"\r\n",
					"    for i in range(1, 31)\r\n",
					"])\r\n",
					"\r\n",
					"# Define update set (extend this for all 30 investigation codes)\r\n",
					"update_set = {\r\n",
					"    f\"EC_InvestigationCode{i}SNOMED\": f\"src.EC_InvestigationCode{i}SNOMED\",\r\n",
					"    f\"EC_InvestigationCode{i}CDS\": f\"src.EC_InvestigationCode{i}CDS\",\r\n",
					"    f\"EC_InvestigationCode{i}Date\": f\"src.EC_InvestigationCode{i}Date\",\r\n",
					"    f\"EC_InvestigationCode{i}Desc\": f\"src.EC_InvestigationCode{i}Desc\"\r\n",
					"    for i in range(1, 31)\r\n",
					"}\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    source_df.alias(\"src\"),\r\n",
					"    \"tgt.visitarchiveid = src.visitarchiveid\"\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set=update_set\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values=update_set | {\"visitarchiveid\": \"src.visitarchiveid\"}\r\n",
					" )\r\n",
					" .whenNotMatchedBySource()\r\n",
					" .delete()\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = target_table.toDF().count()\r\n",
					"print(f\"Number of rows in the target table after merge: {affected_rows}\")"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Version 2"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"target_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Investigations_xTab'\r\n",
					"source_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Investigations_xTab_vw'\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"ECDS_Investigations_Update_Part2\").getOrCreate()\r\n",
					"\r\n",
					"# Read target table and source view\r\n",
					"target_table = DeltaTable.forPath(spark, target_path)\r\n",
					"source_df = spark.read.format(\"delta\").load(source_path)\r\n",
					"\r\n",
					"# Define update condition (extend this for all 30 investigation codes)\r\n",
					"update_condition = \" OR \".join([\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}SNOMED, 'X') != COALESCE(tgt.EC_InvestigationCode{i}SNOMED, 'X')) OR \" +\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}CDS, 'X') != COALESCE(tgt.EC_InvestigationCode{i}CDS, 'X')) OR \" +\r\n",
					"    f\"(COALESCE(src.EC_InvestigationCode{i}Date, to_date('1900-01-01')) != COALESCE(tgt.EC_InvestigationCode{i}Date, to_date('1900-01-01')))\"\r\n",
					"    for i in range(1, 31)\r\n",
					"])\r\n",
					"\r\n",
					"# Define update set (extend this for all 30 investigation codes)\r\n",
					"update_set = {\r\n",
					"    f\"EC_InvestigationCode{i}SNOMED\": f\"src.EC_InvestigationCode{i}SNOMED\",\r\n",
					"    f\"EC_InvestigationCode{i}CDS\": f\"src.EC_InvestigationCode{i}CDS\",\r\n",
					"    f\"EC_InvestigationCode{i}Date\": f\"src.EC_InvestigationCode{i}Date\",\r\n",
					"    f\"EC_InvestigationCode{i}Desc\": f\"src.EC_InvestigationCode{i}Desc\"\r\n",
					"    for i in range(1, 31)\r\n",
					"}\r\n",
					"\r\n",
					"# Perform the MERGE operation\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    source_df.alias(\"src\"),\r\n",
					"    \"tgt.visitarchiveid = src.visitarchiveid\"\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set=update_set\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values=update_set | {\"visitarchiveid\": \"src.visitarchiveid\"}\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# Handle deletions separately\r\n",
					"target_df = target_table.toDF()\r\n",
					"rows_to_keep = target_df.join(source_df, \"visitarchiveid\", \"leftsemi\")\r\n",
					"rows_to_keep.write.format(\"delta\").mode(\"overwrite\").save(target_path)\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = rows_to_keep.count()\r\n",
					"print(f\"Number of rows in the target table after merge: {affected_rows}\")"
				],
				"execution_count": null
			}
		]
	}
}