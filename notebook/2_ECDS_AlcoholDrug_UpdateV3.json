{
	"name": "2_ECDS_AlcoholDrug_UpdateV3",
	"properties": {
		"folder": {
			"name": "ECDS"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "esht",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "032fcc24-e3ad-40d1-8ac8-b2ab93e371c9"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/f6e89fe8-0d17-497c-9795-5ecb2ab3bbcc/resourceGroups/SynapseRG/providers/Microsoft.Synapse/workspaces/ugolouis-synapse-ws/bigDataPools/esht",
				"name": "esht",
				"type": "Spark",
				"endpoint": "https://ugolouis-synapse-ws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/esht",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.4",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Initial set up - declare variables and import functions"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, isnull, lit, when, current_timestamp, current_date\r\n",
					"from delta.tables import DeltaTable"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# define variables\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"container_name = \"nervecentre-data\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"source_relative_path = \"/ECDS_Accomodation_Type_vw.csv\"\r\n",
					"target_relative_path = \"/ECDS_Accomodation_Type.csv\"\r\n",
					"source_path = f'abfss://{container_name}@{storage_account_name}.dfs.core.windows.net{source_relative_path}'\r\n",
					"target_path = f'abfss://{container_name}@{storage_account_name}.dfs.core.windows.net{target_relative_path}'\r\n",
					"source_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Accomodation_Type_vw_delta'\r\n",
					"target_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Accomodation_Type_delta'"
				],
				"execution_count": 2
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Read in source file"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# Read source view from Azure Data Lake\r\n",
					"src_df = spark.read.format(\"delta\").load(source_delta_path)\r\n",
					"\r\n",
					"# display(src_df)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Create DeltaTable object for merge operattion"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"target_table = DeltaTable.forPath(spark, target_delta_path)"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# # display content of target_table\r\n",
					"\r\n",
					"# df = target_table.toDF()\r\n",
					"\r\n",
					"# # display(df)"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Perform the MERGE operation\r\n",
					"merge_condition = \"\"\"\r\n",
					"    tgt.visitarchiveid = src.visitarchiveid AND\r\n",
					"    tgt.IdOrder = src.IdOrder\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"update_condition = \"\"\"\r\n",
					"    tgt.AccomodationTypeDesc <> src.AccomodationTypeDesc OR\r\n",
					"    tgt.AccomodationDateAdded <> src.AccomodationDateAdded OR\r\n",
					"    tgt.AccomodationTypeSNOMED <> src.AccomodationTypeSNOMED\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"(target_table.alias(\"tgt\")\r\n",
					" .merge(\r\n",
					"    src_df.alias(\"src\"),\r\n",
					"    merge_condition\r\n",
					" )\r\n",
					" .whenMatchedUpdate(\r\n",
					"    condition=update_condition,\r\n",
					"    set={\r\n",
					"        \"AccomodationTypeDesc\": \"src.AccomodationTypeDesc\",\r\n",
					"        \"AccomodationDateAdded\": \"src.AccomodationDateAdded\",\r\n",
					"        \"AccomodationTypeSNOMED\": \"src.AccomodationTypeSNOMED\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .whenNotMatchedInsert(\r\n",
					"    values={\r\n",
					"        \"visitarchiveid\": \"src.visitarchiveid\",\r\n",
					"        \"IdOrder\": \"src.IdOrder\",\r\n",
					"        \"AccomodationTypeDesc\": \"src.AccomodationTypeDesc\",\r\n",
					"        \"AccomodationDateAdded\": \"src.AccomodationDateAdded\",\r\n",
					"        \"AccomodationTypeSNOMED\": \"src.AccomodationTypeSNOMED\",\r\n",
					"        \"AmendOn\": current_timestamp()\r\n",
					"    }\r\n",
					" )\r\n",
					" .execute())\r\n",
					"\r\n",
					"# # Log the number of affected rows (optional)\r\n",
					"# affected_rows = target_table.toDF().count()\r\n",
					"# print(f\"Number of rows in the target table after merge: {affected_rows}\")\r\n",
					"\r\n",
					"# # Optionally, you can get more detailed metrics about the merge operation\r\n",
					"# metrics = spark.sql(\"DESCRIBE HISTORY delta.`\" + target_delta_path + \"` LIMIT 1\").select(\"operationMetrics\").collect()[0][0]\r\n",
					"# print(\"Merge operation metrics:\", metrics)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(df)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"df2 = target_table.toDF()\r\n",
					"display(df2)"
				],
				"execution_count": 11
			}
		]
	}
}