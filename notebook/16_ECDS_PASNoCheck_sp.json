{
	"name": "16_ECDS_PASNoCheck_sp",
	"properties": {
		"folder": {
			"name": "ECDS_prod_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "1ab0a6e9-b110-40fa-9a4c-650aa6cb9942"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Create SparkSession\r\n",
					"spark = SparkSession.builder.appName(\"ECDS_PASNoCheck\").getOrCreate()\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"grouper_input_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDSGrouperInput'\r\n",
					"\r\n",
					"# Read necessary tables\r\n",
					"main_df = spark.read.format(\"delta\").load(main_table_path)\r\n",
					"pas_pmi_df = spark.read.table(\"RXCSQL046.InfoData.dbo.pasPMI\")\r\n",
					"patient_visit_df = spark.read.table(\"SPB.PatientVisitHistoryData_Current\")\r\n",
					"patient_data_df = spark.read.table(\"SPB.PatientData_Current\")\r\n",
					"infopmi_merge_df = spark.read.table(\"RXCSQL046.InfoData.dbo.infopmi_merge\")\r\n",
					"pas_pmi_df2 = spark.read.table(\"RXCSQL046.InfoData.dbo.Paspmi\")\r\n",
					"\r\n",
					"# Create temporary view equivalent\r\n",
					"tmp_nc_pmi = main_df.join(pas_pmi_df, main_df.PATID_Extended == pas_pmi_df.Pas_no, \"left_anti\") \\\r\n",
					"    .select(main_df.visitarchiveid, main_df.PATID_Extended.alias(\"Old_Pas_no\"))\r\n",
					"\r\n",
					"# First update\r\n",
					"update1 = tmp_nc_pmi.join(patient_visit_df, \r\n",
					"                          (tmp_nc_pmi.visitarchiveid == patient_visit_df.visitarchiveid) & \r\n",
					"                          (patient_visit_df.eventType == 'A')) \\\r\n",
					"    .join(patient_data_df, patient_visit_df.patientid == patient_data_df.patientid) \\\r\n",
					"    .join(infopmi_merge_df, patient_data_df.hospnumber1 == infopmi_merge_df.id_number) \\\r\n",
					"    .join(pas_pmi_df2, infopmi_merge_df.current_no == pas_pmi_df2.PAS_NO) \\\r\n",
					"    .select(tmp_nc_pmi.visitarchiveid, tmp_nc_pmi.Old_Pas_no, pas_pmi_df2.PAS_NO.alias(\"New_Pas_no\"))\r\n",
					"\r\n",
					"# Second update\r\n",
					"update2 = tmp_nc_pmi.join(update1, \"visitarchiveid\", \"left_anti\") \\\r\n",
					"    .join(patient_visit_df, \r\n",
					"          (tmp_nc_pmi.visitarchiveid == patient_visit_df.visitarchiveid) & \r\n",
					"          (patient_visit_df.eventType == 'A')) \\\r\n",
					"    .join(patient_data_df, patient_visit_df.patientid == patient_data_df.patientid) \\\r\n",
					"    .join(pas_pmi_df, patient_data_df.hospnumber1 == pas_pmi_df.PAS_NO) \\\r\n",
					"    .select(tmp_nc_pmi.visitarchiveid, tmp_nc_pmi.Old_Pas_no, pas_pmi_df.PAS_NO.alias(\"New_Pas_no\"))\r\n",
					"\r\n",
					"# Combine updates\r\n",
					"final_updates = update1.union(update2)\r\n",
					"\r\n",
					"# Update ECDS_EmergencyVisitData_Main\r\n",
					"main_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"main_table.alias(\"main\").merge(\r\n",
					"    final_updates.alias(\"updates\"),\r\n",
					"    \"main.visitarchiveid = updates.visitarchiveid\"\r\n",
					") \\\r\n",
					".whenMatchedUpdate(set = {\r\n",
					"    \"PATID_Extended\": \"updates.New_Pas_no\",\r\n",
					"    \"AmendedOn\": \"current_timestamp()\"\r\n",
					"}) \\\r\n",
					".execute()\r\n",
					"\r\n",
					"# Update ECDSGrouperInput\r\n",
					"grouper_input_table = DeltaTable.forPath(spark, grouper_input_path)\r\n",
					"grouper_input_table.alias(\"grouper\").merge(\r\n",
					"    final_updates.alias(\"updates\"),\r\n",
					"    \"grouper.visitarchiveid = updates.visitarchiveid\"\r\n",
					") \\\r\n",
					".whenMatchedUpdate(set = {\r\n",
					"    \"PatID\": \"updates.New_Pas_no\",\r\n",
					"    \"InsertedOn\": \"current_timestamp()\"\r\n",
					"}) \\\r\n",
					".execute()\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows_main = main_table.toDF().filter(col(\"AmendedOn\") == current_timestamp()).count()\r\n",
					"affected_rows_grouper = grouper_input_table.toDF().filter(col(\"InsertedOn\") == current_timestamp()).count()\r\n",
					"print(f\"Number of rows updated in ECDS_EmergencyVisitData_Main: {affected_rows_main}\")\r\n",
					"print(f\"Number of rows updated in ECDSGrouperInput: {affected_rows_grouper}\")"
				],
				"execution_count": null
			}
		]
	}
}