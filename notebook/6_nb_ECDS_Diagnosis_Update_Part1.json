{
	"name": "6_nb_ECDS_Diagnosis_Update_Part1",
	"properties": {
		"folder": {
			"name": "create_source_tables/ECDS_spark_sql_notebooks"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "12e34b79-df94-4cac-8b58-5364e9e5b138"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "python"
			},
			"language_info": {
				"name": "python"
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql.functions import col, when, coalesce, lit, current_timestamp\r\n",
					"from delta.tables import DeltaTable\r\n",
					"\r\n",
					"# Define paths\r\n",
					"storage_account_name = \"synapsestr\"\r\n",
					"delta_container_name = \"nervecentre-delta\"\r\n",
					"source_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis_vw'\r\n",
					"target_delta_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_Diagnosis'\r\n",
					"main_table_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/ECDS_EmergencyVisitData_Main'\r\n",
					"sensitive_codes_path = f'abfss://{delta_container_name}@{storage_account_name}.dfs.core.windows.net/refECDS_SensitiveCodesSNOMED'\r\n",
					"\r\n",
					"# Read source view\r\n",
					"src_df = spark.read.format(\"delta\").load(source_delta_path)\r\n",
					"\r\n",
					"# Create a DeltaTable object for the target table\r\n",
					"target_table = DeltaTable.forPath(spark, target_delta_path)\r\n",
					"\r\n",
					"# Register temporary views for source and target\r\n",
					"src_df.createOrReplaceTempView(\"source_view\")\r\n",
					"target_table.toDF().createOrReplaceTempView(\"target_table\")\r\n",
					"\r\n",
					"# Perform the MERGE operation using Spark SQL\r\n",
					"merge_sql = \"\"\"\r\n",
					"MERGE INTO target_table AS tgt\r\n",
					"USING source_view AS src\r\n",
					"ON tgt.visitarchiveid = src.visitarchiveid AND tgt.Coded_Clinical_Entry_Seq_Num = src.Coded_Clinical_Entry_Seq_Num\r\n",
					"WHEN MATCHED AND (\r\n",
					"    (COALESCE(src.EC_Diagnosis_CodeSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_CodeSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.Coded_Clinical_Entry_Seq_Num, 0) <> COALESCE(tgt.Coded_Clinical_Entry_Seq_Num, 0)) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_QualifierSNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_QualifierSNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.EC_Diagnosis_LataralitySNOMED, 'X') <> COALESCE(tgt.EC_Diagnosis_LataralitySNOMED, 'X')) OR\r\n",
					"    (COALESCE(src.DiagnosisComment, 'X') <> COALESCE(tgt.DiagnosisComment, 'X'))\r\n",
					")\r\n",
					"THEN UPDATE SET\r\n",
					"    DiagnosiosisDesc = src.DiagnosisDesc,\r\n",
					"    EC_Diagnosis_CodeSNOMED = src.EC_Diagnosis_CodeSNOMED,\r\n",
					"    Coded_Clinical_Entry_Seq_Num = src.Coded_Clinical_Entry_Seq_Num,\r\n",
					"    DiagnosisQualifierDesc = src.DiagnosisQualifierDesc,\r\n",
					"    EC_Diagnosis_QualifierSNOMED = src.EC_Diagnosis_QualifierSNOMED,\r\n",
					"    DiagnosisLataralityDesc = src.DiagnosisLataralityDesc,\r\n",
					"    EC_Diagnosis_LataralitySNOMED = src.EC_Diagnosis_LataralitySNOMED,\r\n",
					"    DiagnosisComment = src.DiagnosisComment,\r\n",
					"    AmendOn = current_timestamp()\r\n",
					"WHEN NOT MATCHED\r\n",
					"THEN INSERT (\r\n",
					"    visitarchiveid,\r\n",
					"    DiagnosiosisDesc,\r\n",
					"    EC_Diagnosis_CodeSNOMED,\r\n",
					"    Coded_Clinical_Entry_Seq_Num,\r\n",
					"    DiagnosisQualifierDesc,\r\n",
					"    EC_Diagnosis_QualifierSNOMED,\r\n",
					"    DiagnosisLataralityDesc,\r\n",
					"    EC_Diagnosis_LataralitySNOMED,\r\n",
					"    DiagnosisComment\r\n",
					") VALUES (\r\n",
					"    src.visitarchiveid,\r\n",
					"    src.DiagnosisDesc,\r\n",
					"    src.EC_Diagnosis_CodeSNOMED,\r\n",
					"    src.Coded_Clinical_Entry_Seq_Num,\r\n",
					"    src.DiagnosisQualifierDesc,\r\n",
					"    src.EC_Diagnosis_QualifierSNOMED,\r\n",
					"    src.DiagnosisLataralityDesc,\r\n",
					"    src.EC_Diagnosis_LataralitySNOMED,\r\n",
					"    src.DiagnosisComment\r\n",
					")\r\n",
					"WHEN NOT MATCHED BY SOURCE\r\n",
					"THEN DELETE\r\n",
					"\"\"\"\r\n",
					"\r\n",
					"# Execute the Spark SQL merge statement\r\n",
					"spark.sql(merge_sql)\r\n",
					"\r\n",
					"# Perform the additional UPDATE operation\r\n",
					"main_table = DeltaTable.forPath(spark, main_table_path)\r\n",
					"diagnosis_df = target_table.toDF()\r\n",
					"sensitive_codes_df = spark.read.format(\"delta\").load(sensitive_codes_path)\r\n",
					"\r\n",
					"# Join the tables\r\n",
					"joined_df = (main_table.toDF().alias(\"m\")\r\n",
					"             .join(diagnosis_df.alias(\"d\"), col(\"m.visitarchiveid\") == col(\"d.visitarchiveid\"))\r\n",
					"             .join(sensitive_codes_df.alias(\"sc\"), col(\"d.EC_Diagnosis_CodeSNOMED\") == col(\"sc.snomed\"))\r\n",
					"             .where(col(\"m.Sensitive_Flag\") == \"N\")\r\n",
					"             .select(\"m.visitarchiveid\"))\r\n",
					"\r\n",
					"# Update the main table\r\n",
					"main_table.update(\r\n",
					"    condition=\"visitarchiveid IN (SELECT visitarchiveid FROM joined_df)\",\r\n",
					"    set={\"Sensitive_Flag\": lit(\"Y\")}\r\n",
					")\r\n",
					"\r\n",
					"# Log the number of affected rows (optional)\r\n",
					"affected_rows = spark.sql(\"SELECT COUNT(*) FROM target_table\").collect()[0][0]\r\n",
					"print(f\"Number of rows in the target table after merge: {affected_rows}\")\r\n",
					"\r\n",
					"updated_rows = main_table.toDF().where(col(\"Sensitive_Flag\") == \"Y\").count()\r\n",
					"print(f\"Number of rows updated in the main table: {updated_rows}\")"
				],
				"execution_count": null
			}
		]
	}
}